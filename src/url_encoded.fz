module url_encoded is
    # Decode a URL-encoded string
  module from_urlencoded(data String) String =>
    res := mut ""
    for c in data.as_codepoints
        i := 0, i + 1
    do
      s String =>
        if c = "+"
          " "
        else if c = "%" && (i < data.codepoint_length - 2)
          # Convert a hexadecimal character to an integer
          h := encodings.base16.decode_str ((data.substring i+1 i+3).upper_case)

          if(h.ok)
            val := (h.val[0].as_u32)
            codepoint val
          else
            panic "Encoding error: not a hex digit"
        else
          ""
      res <- res.get+s

    res.get
  # say (from_urlencoded "memor%ABygement")

  # Parse URL-encoded form data into a map
  parse_urlencoded_map(data String) container.ps_map String String =>
    pairs := data.split("&")
    form_data := (container.ps_map String String).empty
    for p in pairs do
      nv := p.split("=")
      name := from_urlencoded(nv.first).trim
      val String =>
        if nv.count < 2
          ""
        else
          from_urlencoded(nv.drop(1).first)
      _ := form_data.add(name,val)
    form_data


  # Strip non-alphanumeric characters from a string
  module strip_non_alpha_numeric(s String) String =>
    res := mut ""
    for c in s.as_codepoints
        i := 0, i + 1
    do
      if (("0" <= c) && (c <= "9")) || ("a" <= c && c <= "z") || ("A" <= c && c <= "Z") || c = "_" then
        res <- res.get + c
      else
        res <- res.get + "_"
    res.get
  # say (strip_non_alpha_numeric("sjqnwql56489*^&^%%"))

  # HTML-encode a string
  module html_encode(s String) String =>
    res := mut ""
    for c in s.as_codepoints
        i := 0, i + 1
    do
      if c = "32"
        res<- res.get + "&nbsp;"
      else if c = "38"
        res<- res.get + "&amp;"
      else if c = "60"
        res<- res.get + "&lt;"
      else if c = "62"
        res<- res.get + "&gt;"
      else if c = "34"
        res<- res.get + "&quot;"
      else if c = "39"
        res<- res.get + "&#x27;"
      else if c = "47"
        res<- res.get + "&#x2F;"
      else
        res<- res.get + c
    res.get
    # Encode HTML data with newlines preserved
  module encode_html_data(s String) String =>
    res := mut ""
    res<- res.get+"data: "
    for c in s.as_codepoints
        i := 0, i + 1
    do
      if c = "10" then
        res<- res.get+"\ndata: "
      else
        res<- res.get+html_encode(c)
    res<- res.get+"\n"
    res.get
